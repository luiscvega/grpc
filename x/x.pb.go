// Code generated by protoc-gen-go. DO NOT EDIT.
// source: x/x.proto

package x

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ddb57ca7bd33e7, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Image struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_08ddb57ca7bd33e7, []int{1}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*Image)(nil), "Image")
}

func init() { proto.RegisterFile("x/x.proto", fileDescriptor_08ddb57ca7bd33e7) }

var fileDescriptor_08ddb57ca7bd33e7 = []byte{
	// 119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xac, 0xd0, 0xaf, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe6, 0x62, 0x75, 0x2d, 0x2a, 0xca, 0x2f, 0x12, 0x12,
	0xe2, 0x62, 0x29, 0x49, 0xad, 0x28, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95,
	0x64, 0xb9, 0x58, 0x3d, 0x73, 0x13, 0xd3, 0x53, 0x85, 0x44, 0xb8, 0x58, 0x93, 0x2a, 0x4b, 0x52,
	0x8b, 0xc1, 0xb2, 0x3c, 0x41, 0x10, 0x8e, 0x91, 0x16, 0x17, 0x7b, 0x50, 0x6a, 0x71, 0x66, 0x55,
	0x6a, 0x91, 0x90, 0x3c, 0x17, 0x37, 0x84, 0x09, 0x51, 0xcf, 0xa6, 0x07, 0xa6, 0xa5, 0xd8, 0xf4,
	0xc0, 0x86, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0xad, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x45,
	0x97, 0x28, 0x34, 0x7b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResizerClient is the client API for Resizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResizerClient interface {
	ResizeImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Error, error)
}

type resizerClient struct {
	cc *grpc.ClientConn
}

func NewResizerClient(cc *grpc.ClientConn) ResizerClient {
	return &resizerClient{cc}
}

func (c *resizerClient) ResizeImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/Resizer/ResizeImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResizerServer is the server API for Resizer service.
type ResizerServer interface {
	ResizeImage(context.Context, *Image) (*Error, error)
}

// UnimplementedResizerServer can be embedded to have forward compatible implementations.
type UnimplementedResizerServer struct {
}

func (*UnimplementedResizerServer) ResizeImage(ctx context.Context, req *Image) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeImage not implemented")
}

func RegisterResizerServer(s *grpc.Server, srv ResizerServer) {
	s.RegisterService(&_Resizer_serviceDesc, srv)
}

func _Resizer_ResizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResizerServer).ResizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Resizer/ResizeImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResizerServer).ResizeImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Resizer",
	HandlerType: (*ResizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResizeImage",
			Handler:    _Resizer_ResizeImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "x/x.proto",
}
